---
title: "Reproducible documents"
author: "Mikkel Alnor"
format: html
code-fold: FALSE
theme: darkly   # cosmo bootswatch theme
highlight-style: arrow
---

# Setup code chuck

```{r setup, message=FALSE,warning=FALSE}
library(knitr)
library(tidyverse)
library(ggplot2)
post_meal_data <- read_csv2(here::here("data/post-meal-insulin.csv"))

small_post_meal_data <- select(post_meal_data, id, Age, BMI, Group, auc_pg, auc_ins, glykemi)

tidier_post_meal_data <- small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |>
  filter(glykemi == 0) |>
  select(-glykemi) |> 
  mutate(insulin_glucose_ratio = auc_insulin / auc_glucose, Group = if_else (Group == "CTR", "Control", "First Degree Relative")) |> 
  mutate(Overweight = if_else(BMI >= 25 , "Overweight", "Not Overweight"))
```

## About me

-   Owns many shrimps

-   From SDU, FGM, ATLAS

I started my PhD the 1th of *October*

I am taller than i am **wide**

## Simple code

```{r}
3 * 3
```

## Testing for Git

Then type out a sentence below the header with some random words, maybe about the weather.

## Showing the data

```{r, eval=FALSE}
post_meal_data
```

```{r,echo=T, results='hide'}
glimpse(post_meal_data)
head(post_meal_data)
```

## Tidy data

Each variable is a column; each column is a variable. Each observation is a row; each row is an observation. Each value is a cell; each cell is a single value.

mistakes in the data BMI is combined NA values id column

```{r,echo=T, results='hide'}
colnames(post_meal_data)
post_meal_data$id
```

## 9 - Basic data visualization

```{r}
#| label: fig-bmi-histo
#| fig-cap: "Distribution of BMI."

ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram(bins = 10)
```

## Exercise: discrete plots

```{r}
#| label: fig-Discrete-plots
#| fig-cap: "Glykemi and Groups"

post_meal_data |>
  ggplot(aes(x = Group, fill = as.factor(glykemi))) +
  geom_bar() +
  labs(fill = "Glykemi")
```

## Side by side plots

```{r}
#| label: fig-bmi-glycemia
#| fig-cap: "BMI and glycemia, side by side."
#| fig-subcap:
#|   - "Distribution of BMI."
#|   - "Number of those with glycemia."
#| layout-ncol: 2

ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram(bins = 10)

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

## 9.11 Plotting two continuous variables

```{r}
#| label: fig-BMI-auc_pg
#| fig-cap: "BMI and auc_pg,"
#| fig-subcap:
#|  - "geom point"
#|  - "geom hex"
#|  - "geom point and geom smooth"
#| layout-ncol: 3

post_meal_data |>
  ggplot(aes(x = BMI, y = auc_pg)) +
  geom_point()

post_meal_data |>
  ggplot(aes(x = BMI, y = auc_pg)) +
  geom_hex()

post_meal_data |>
  ggplot(aes(x = BMI, y = auc_pg)) +
  geom_point() +
  geom_smooth(fill = "red4")
```

# **10 - Collaborating with GitHub**

\### Pushing changes to remote

\### pulling

# **11 - Data management and wrangling**

```{r}
post_meal_data |>
  select(Insulin10)

post_meal_data |>
  select(-Group)

post_meal_data |>
  select(Age, BMI, Weight)

post_meal_data |>
  select(starts_with("PG"))

post_meal_data |>
  select(ends_with("DXA"))

post_meal_data |>
  select(contains("0"))
```

## Renaming specific columns

```{r}
colnames(small_post_meal_data)

small_post_meal_data |>
  rename(
    Auc_glucose = auc_pg,
    Auc_insulin = auc_ins
  )

basic_info <- select(post_meal_data, id, BMI, Length, Weight, Age)
rename(basic_info, Height = Length)
```

```{r}
post_meal_data |>
  select(contains("OGTT"))

post_meal_data |>
  select(contains(".."), -contains("...")) |>
  rename(
    P.Glucose.minus5.OGTT = P.Glucose..5.OGTT,
    Insulin.minus5.OGTT.X = Insulin..5.OGTT.X
  )

post_meal_data |>
  select(contains(".."), -contains("...")) |>
  rename_with(~ gsub("..", ".minus", .x, fixed = TRUE))
```

## filtering data by row

```{r}
small_post_meal_data |>
  filter(glykemi == 1)

small_post_meal_data |>
  filter(BMI >= 25)

small_post_meal_data |>
  filter(Group == "CTR")


small_post_meal_data |>
  filter(Group == "CTR" & BMI >= 25)
small_post_meal_data |>
  filter(Group == "CTR" | BMI >= 25)
```

## 11.8 Modify or add column

```{r}
tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First Degree Relative")
  )
```

## 11.9 Exercise: Practice with filter and mutate

```{r}
# Task 1.
post_meal_data |>
  filter(BMI >= 20 & BMI <= 40 & Group == "FDR")

# Task 2.
post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100
  ) |>
  filter(percent_body_fat > 30)
```

## 12.2

```{r}

tidier_post_meal_data |> 
  mutate(Overweight = if_else(BMI >= 25 , TRUE, FALSE))



```

```{r}
tidier_post_meal_data |> 
  ggplot(aes(x=Overweight,y=insulin_glucose_ratio))+
  geom_jitter(width=0.2)
```

```{r}
tidier_post_meal_data |> 
  filter(BMI<30) |> 
  ggplot(aes(x=Age,y=auc_insulin,color=Group))+
  geom_point()
```

```{r}
tidier_post_meal_data |>
  filter(BMI < 30) |>
  mutate(young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, color = Group)) +
  geom_point() +
  facet_grid(rows = vars(young)) +
  labs(
    x = "Body mass index",
    y = "Insulin glucose ratio"
  )

```

## Make multi-dimensional plots!

```{r}
#| label: fig-multidimensional
#| fig-cap: "Two, mult-dimensional plots of our data."
#| fig-subcap:
#|   - "Distribution of percent body fat by group and age category."
#|   - "Relationship between BMI and bone mineral density, split by insulin sensitivity."
#| layout-ncol: 2


post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100)

post_meal_data |>
  mutate(percent_body_fat = (Fat.mass.DXA / Weight) * 100,
    young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = Group, y = percent_body_fat, colour = young)) +
  geom_jitter(width = 0.2)

```

```{r}
post_meal_data |> 
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |> 
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    insulin_insensitive = if_else(insulin_glucose_ratio >= mean(insulin_glucose_ratio), "Sensitive", "Insensitive")) |> 
  ggplot(aes(x=BMI,y=Bone.mineral.DXA,color=insulin_insensitive))+
  geom_point()+
  geom_smooth()+
  facet_grid(cols = vars(insulin_insensitive))
```

```{r}
# This is an example of what the code will look like:
#| label: fig-multidimensional
#| fig-cap: "Two, mult-dimensional plots of our data."
#| fig-subcap:
#|   - "Distribution of percent body fat by group and age category."
#|   - "Relationship between BMI and bone mineral density, split by insulin sensitivity."
#| layout-ncol: 2



# Task 2.
post_meal_data |>
  mutate(
    insulin_glucose_ratio = (auc_ins / auc_pg),
    insulin_insensitive = if_else(insulin_glucose_ratio > mean(insulin_glucose_ratio), "Insensitive", "Sensitive")
  ) |>
  ggplot(aes(x = BMI, y = Bone.mineral.DXA)) +
  geom_point() +
  geom_smooth() +
  facet_grid(cols = vars(insulin_insensitive))
```

## Changing colours

```{r}

# Tasks 1. and 2.
post_meal_data |>
  mutate(hyperglycemia = if_else(glykemi == 1, "Yes", "No")) |>
  ggplot(aes(x = Group, fill = hyperglycemia)) +
  geom_bar(position = position_dodge()) +
  scale_fill_viridis_d(option = "cividis")

# Tasks 3. and 4.
post_meal_data |>
  ggplot(aes(x = auc_pg, y = auc_ins, colour = BMI)) +
  geom_point() +
  scale_colour_viridis_c(option = "inferno")

```

## **13 Split, apply, and combine**

```{r}

tidier_post_meal_data |>
  summarise(max_bmi = max(BMI),
            min_bmi = min(BMI),
            mean_bmi = mean(BMI)
            )

tidier_post_meal_data |>
  group_by(Group) |> 
  summarise(max_bmi = max(BMI),
            mean_bmi = mean(BMI)
            )

tidier_post_meal_data |>
  group_by(Group) |>
  summarise(
    mean_age = mean(Age),
    mean_bmi = mean(BMI)
  ) |>
  ungroup() |>
  knitr::kable()
```

```{r}
#| label: tbl-mean-age-bmi
#| tbl-cap: "Mean values of Age and BMI for each group."
tidier_post_meal_data |>
  group_by(Group) |>
  summarise(
    "Mean Age (yrs)" = round(mean(Age), 1),
    "Mean BMI (kg/m**)" = round(mean(BMI), 1)
  ) |>
  ungroup() |>
  knitr::kable()

```

## 13.6

```{r}
#| label: tbl-summary-table
#| fig-cap: "Median values of AUC measurements by age group and family history group."

post_meal_data |>
  # Task 2.
  filter(BMI < 30) |>
  # Task 3.
  mutate(
    age_group = if_else(Age < 40, "Young", "Old"),
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  ) |>
  # Task 4.
  group_by(Group, age_group) |>
  summarise(
    "AUC c-Peptide" = round(median(auc_cp), 1),
    "AUC Glucose" = round(median(auc_pg), 1),
    "AUC Insulin" = round(median(auc_ins), 1)
  ) |>
  # Task 5.
  rename(
    "Age group" = age_group,
    "Family history" = Group
  ) |>
  # Task 6.
  ungroup() |>
  knitr::kable()
```
